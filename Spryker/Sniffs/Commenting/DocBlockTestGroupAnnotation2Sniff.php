<?php

/**
 * MIT License
 * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
 */

namespace Spryker\Sniffs\Commenting;

use Exception;
use PHP_CodeSniffer\Files\File;
use Spryker\Sniffs\AbstractSniffs\AbstractSprykerSniff;

/**
 * Checks if doc blocks of Spryker test classes contain all necessary @group annotations.
 */
class DocBlockTestGroupAnnotation2Sniff extends AbstractSprykerSniff
{
    const ANNOTATION_START_TEXT = 'Auto-generated group annotations';
    const ANNOTATION_END_TEXT = 'Add your own group annotations below this line';

    /**
     * @return array
     */
    public function register()
    {
        return [
            T_CLASS,
        ];
    }

    /**
     * @param \PHP_CodeSniffer\Files\File $phpCsFile
     * @param int $stackPointer
     *
     * @return void
     */
    public function process(File $phpCsFile, $stackPointer)
    {
        $filename = $phpCsFile->getFilename();

        preg_match('#/(tests)/(SprykerTest|PyzTest)/(.+)(Test|Cest).php$#', $filename, $matches);
        if (!$matches) {
            return;
        }

        $namespaceParts = $this->getNamespaceParts($phpCsFile, $stackPointer);
        if (!$namespaceParts) {
            return;
        }

        $givenAnnotations = $this->getAnnotations($phpCsFile, $stackPointer);
        $expectedAnnotations = $this->getExpectedAnnotations($phpCsFile, $namespaceParts);

        if ($this->containsExpectedGroupAnnotations($givenAnnotations, $expectedAnnotations)) {
            return;
        }

        $endAutoGeneratedAnnotationsPosition = array_search(static::ANNOTATION_END_TEXT, $givenAnnotations);
        if ($endAutoGeneratedAnnotationsPosition && count($givenAnnotations) > count($expectedAnnotations)) {
            $additionalAnnotations = array_slice($givenAnnotations, $endAutoGeneratedAnnotationsPosition + 1);
            $expectedAnnotations = array_merge($expectedAnnotations, $additionalAnnotations);
        }

        $this->fixGroupAnnotation($phpCsFile, $stackPointer, $expectedAnnotations);
    }

    /**
     * @param \PHP_CodeSniffer\Files\File $phpCsFile
     * @param int $stackPointer
     * @param array $expectedGroupAnnotations
     *
     * @return void
     */
    protected function fixGroupAnnotation(File $phpCsFile, $stackPointer, array $expectedGroupAnnotations)
    {
        $fix = $phpCsFile->addFixableError('@group annotation missing or incomplete', $stackPointer, 'Incomplete');

        if (!$fix) {
            return;
        }

        $docCommentEndPosition = $this->findRelatedDocBlock($phpCsFile, $stackPointer);

        if (!$docCommentEndPosition) {
            $this->addCommentWithGroupAnnotation($phpCsFile, $stackPointer, $expectedGroupAnnotations);
            return;
        }

        $this->modifyExistingComment($phpCsFile, $docCommentEndPosition, $expectedGroupAnnotations);
    }

    /**
     * @param \PHP_CodeSniffer\Files\File $phpCsFile
     * @param int $stackPointer
     * @param array $expectedAnnotations
     *
     * @return void
     */
    protected function addCommentWithGroupAnnotation(File $phpCsFile, $stackPointer, array $expectedAnnotations)
    {
        $tokens = $phpCsFile->getTokens();

        $startPosition = $stackPointer;
        while ($tokens[$startPosition - 1]['line'] === $tokens[$stackPointer]['line']) {
            $startPosition--;
        }

        $startPosition--;

        $phpCsFile->fixer->beginChangeset();

        $phpCsFile->fixer->addContent($startPosition, '/**');
        $phpCsFile->fixer->addNewline($startPosition);

        foreach ($expectedAnnotations as $annotation) {
            $phpCsFile->fixer->addContent($startPosition, ' * ' . $annotation);
            $phpCsFile->fixer->addNewline($startPosition);
        }

        $phpCsFile->fixer->addContent($startPosition, ' */');
        $phpCsFile->fixer->addNewline($startPosition);

        $phpCsFile->fixer->endChangeset();
    }

    /**
     * @param \PHP_CodeSniffer\Files\File $phpCsFile
     * @param int $docCommentEndPosition
     * @param array $namespaceParts
     *
     * @return void
     */
    protected function modifyExistingComment(File $phpCsFile, $docCommentEndPosition, array $namespaceParts)
    {
        $tokens = $phpCsFile->getTokens();

        $docCommentStartPosition = $tokens[$docCommentEndPosition]['comment_opener'];

        $startPosition = $docCommentStartPosition + 2;

        $phpCsFile->fixer->beginChangeset();
        if ($startPosition) {
            $endPosition = $docCommentEndPosition - 2;
            for ($i = $startPosition; $i <= $endPosition; $i++) {
                $phpCsFile->fixer->replaceToken($i, '');
            }
        }

        foreach ($namespaceParts as $namespacePart) {
            $phpCsFile->fixer->addContent($startPosition, ' * ' . $namespacePart);
            $phpCsFile->fixer->addNewline($startPosition);
        }

        $phpCsFile->fixer->endChangeset();
    }

    /**
     * @param \PHP_CodeSniffer\Files\File $phpCsFile
     * @param int $stackPointer
     *
     * @return array
     */
    protected function getNamespaceParts(File $phpCsFile, $stackPointer)
    {
        $namespace = $this->getNamespaceStatement($phpCsFile);
        if (!$namespace) {
            return [];
        }

        $parts = explode('\\', $namespace['namespace']);

        $name = $this->getClassOrInterfaceName($phpCsFile, $stackPointer);
        $parts[] = $name;

        return $parts;
    }

    /**
     * @param \PHP_CodeSniffer\Files\File $phpCsFile
     * @param int $stackPointer
     *
     * @return string
     */
    protected function getClassOrInterfaceName(File $phpCsFile, $stackPointer)
    {
        $classOrInterfacePosition = $phpCsFile->findPrevious([T_CLASS, T_INTERFACE], $stackPointer);
        $classOrInterfaceNamePosition = $phpCsFile->findNext(T_STRING, $classOrInterfacePosition);

        return $phpCsFile->getTokens()[$classOrInterfaceNamePosition]['content'];
    }

    /**
     * @param \PHP_CodeSniffer\Files\File $phpCsFile
     * @param int $stackPointer
     *
     * @return array
     */
    protected function getAnnotations(File $phpCsFile, $stackPointer)
    {
        $tokens = $phpCsFile->getTokens();

        $docBlockEndIndex = $this->findRelatedDocBlock($phpCsFile, $stackPointer);
        if (!$docBlockEndIndex) {
            return [];
        }

        $docBlockStartIndex = $tokens[$docBlockEndIndex]['comment_opener'];

        $parts = [];
        for ($i = $docBlockStartIndex; $i < $docBlockEndIndex; $i++) {
            $content = $tokens[$i]['content'];
            if ($content !== '@group' && $content !== static::ANNOTATION_START_TEXT && $content !== static::ANNOTATION_END_TEXT) {
                continue;
            }

            if ($content === '@group') {
                $i = $i + 2;
                $content = '@group ' . $tokens[$i]['content'];
            }

            $parts[] = $content;
        }

        return $parts;
    }

    /**
     * @param \PHP_CodeSniffer\Files\File $phpCsFile
     * @param array $namespaceParts
     *
     * @return array
     */
    protected function getExpectedAnnotations(File $phpCsFile, array $namespaceParts)
    {
        $className = array_pop($namespaceParts);
        array_unshift($namespaceParts, static::ANNOTATION_START_TEXT);
        $expectedAnnotations = $namespaceParts;
        if (preg_match('/Facade/', $className)) {
            array_push($expectedAnnotations, 'Facade');
        }
        array_push($expectedAnnotations, $className);
        array_push($expectedAnnotations, static::ANNOTATION_END_TEXT);

        $callback = function ($value) {
            if ($value === static::ANNOTATION_START_TEXT || $value === static::ANNOTATION_END_TEXT) {
                return $value;
            }

            return '@group ' . $value;
        };

        return array_map($callback, $expectedAnnotations);
    }

    /**
     * @param \PHP_CodeSniffer\Files\File $phpCsFile
     * @param int $docCommentStartPosition
     * @param int $firstDocCommentTagPosition
     *
     * @return int|null
     */
    protected function findGroupTagPosition(File $phpCsFile, $docCommentStartPosition, $firstDocCommentTagPosition)
    {
        $tokens = $phpCsFile->getTokens();
        $docEndIndex = $tokens[$docCommentStartPosition]['comment_closer'];

        for ($i = $firstDocCommentTagPosition; $i < $docEndIndex; $i++) {
            if ($tokens[$i]['content'] !== '@group') {
                continue;
            }

            while ($tokens[$i - 1]['line'] === $tokens[$i]['line']) {
                $i--;
            }

            return $i;
        }

        return null;
    }

    /**
     * @param \PHP_CodeSniffer\Files\File $phpCsFile
     * @param int $docCommentStartPosition
     *
     * @return int
     */
    protected function getLastLineOfDocBlock(File $phpCsFile, $docCommentStartPosition)
    {
        $tokens = $phpCsFile->getTokens();
        $index = $tokens[$docCommentStartPosition]['comment_closer'];

        while ($tokens[$index - 1]['line'] === $tokens[$index]['line']) {
            $index--;
        }

        return $index;
    }

    /**
     * @param \PHP_CodeSniffer\Files\File $phpCsFile
     * @param int $docCommentStartPosition
     * @param int $firstGroupTagPosition
     *
     * @throws \Exception
     *
     * @return int
     */
    protected function getGroupTagPositionEnd(File $phpCsFile, $docCommentStartPosition, $firstGroupTagPosition)
    {
        $tokens = $phpCsFile->getTokens();

        $docCommentCloserPosition = $tokens[$docCommentStartPosition]['comment_closer'];

        for ($i = $docCommentCloserPosition; $i > $firstGroupTagPosition; $i--) {
            if ($tokens[$i]['content'] !== '@group') {
                continue;
            }

            while ($tokens[$i + 1]['line'] === $tokens[$i]['line']) {
                $i++;
            }

            return $i;
        }

        throw new Exception('Not possible');
    }

    /**
     * @param array $givenGroupAnnotationParts
     * @param array $expectedGroupAnnotations
     *
     * @return bool
     */
    private function containsExpectedGroupAnnotations(array $givenGroupAnnotationParts, array $expectedGroupAnnotations)
    {
        if (count($givenGroupAnnotationParts) === 0) {
            return false;
        }
        foreach ($expectedGroupAnnotations as $index => $expectedGroupAnnotation) {
            if ($givenGroupAnnotationParts[$index] !== $expectedGroupAnnotation) {
                return false;
            }
        }

        return true;
    }
}
